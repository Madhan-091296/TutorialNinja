{"name": "test_account_reg", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: MicrosoftEdge=137.0.3296.83)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff703b63985+25605]\n\t(No symbol) [0x0x7ff703ab3a90]\n\tMicrosoft::Applications::Events::EventProperty::to_string [0x0x7ff703de6fca+1962554]\n\t(No symbol) [0x0x7ff70385c29f]\n\t(No symbol) [0x0x7ff7038ef580]\n\t(No symbol) [0x0x7ff703906eea]\n\t(No symbol) [0x0x7ff7038e9bb3]\n\t(No symbol) [0x0x7ff7038bdf56]\n\t(No symbol) [0x0x7ff7038bd463]\n\t(No symbol) [0x0x7ff7038bdd83]\n\t(No symbol) [0x0x7ff7039be0fd]\n\t(No symbol) [0x0x7ff7039cdd08]\n\tMicrosoft::Applications::Events::EventProperty::to_string [0x0x7ff703c48959+265161]\n\tMicrosoft::Applications::Events::EventProperty::to_string [0x0x7ff703c50261+296145]\n\t(No symbol) [0x0x7ff703ac2231]\n\t(No symbol) [0x0x7ff703aba6d4]\n\t(No symbol) [0x0x7ff703aba823]\n\t(No symbol) [0x0x7ff703aab9f6]\n\tBaseThreadInitThunk [0x0x7ffa90ede8d7+23]\n\tRtlUserThreadStart [0x0x7ffa9103c34c+44]", "trace": "self = <testCases.test_001_AccountRegistration.Test_001_AccountReg object at 0x000001C365682350>\nsetup = <selenium.webdriver.edge.webdriver.WebDriver (session=\"95c0dbdc97e7bebdd3587dbf53f17887\")>\n\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.sanity\n    def test_account_reg(self,setup):\n        self.logger.info(\"********* Test Account Registration Started *********\")\n        self.driver = setup\n        self.driver.get(self.baseURL)\n        self.logger.info(\"********* Launching Application *********\")\n>       self.driver.maximize_window()\n\ntestCases\\test_001_AccountRegistration.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:622: in maximize_window\n    self.execute(command, None)\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001C37BC7B770>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...[0x0x7ff703aab9f6]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffa90ede8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7ffa9103c34c+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: MicrosoftEdge=137.0.3296.83)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff703b63985+25605]\nE       \t(No symbol) [0x0x7ff703ab3a90]\nE       \tMicrosoft::Applications::Events::EventProperty::to_string [0x0x7ff703de6fca+1962554]\nE       \t(No symbol) [0x0x7ff70385c29f]\nE       \t(No symbol) [0x0x7ff7038ef580]\nE       \t(No symbol) [0x0x7ff703906eea]\nE       \t(No symbol) [0x0x7ff7038e9bb3]\nE       \t(No symbol) [0x0x7ff7038bdf56]\nE       \t(No symbol) [0x0x7ff7038bd463]\nE       \t(No symbol) [0x0x7ff7038bdd83]\nE       \t(No symbol) [0x0x7ff7039be0fd]\nE       \t(No symbol) [0x0x7ff7039cdd08]\nE       \tMicrosoft::Applications::Events::EventProperty::to_string [0x0x7ff703c48959+265161]\nE       \tMicrosoft::Applications::Events::EventProperty::to_string [0x0x7ff703c50261+296145]\nE       \t(No symbol) [0x0x7ff703ac2231]\nE       \t(No symbol) [0x0x7ff703aba6d4]\nE       \t(No symbol) [0x0x7ff703aba823]\nE       \t(No symbol) [0x0x7ff703aab9f6]\nE       \tBaseThreadInitThunk [0x0x7ffa90ede8d7+23]\nE       \tRtlUserThreadStart [0x0x7ffa9103c34c+44]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchWindowException"}, "start": 1750426883346, "stop": 1750426883422, "uuid": "be3ee7c5-aaca-4ebf-9636-15c3e9f0cd7d", "testCaseId": "3dedeb2515f6f86e7d9f34cb80a11546", "fullName": "test_001_AccountRegistration.Test_001_AccountReg#test_account_reg"}